#include<stdio.h>
#include<math.h>
struct POINT
{
float x;
float y;
};
typedef struct POINT point;
struct RECTANGLE
{
float length;
float breadth;
float area;
point P[3];
};
typedef struct RECTANGLE rectangle;
void input_1(rectangle *one)
{
for(int i=0;i<3;i++)
{
printf("point %d \n",i);
printf("enter x coordinate and y coordinate:");
scanf("%f%f",&one->point[i].x,&one->point[i].y);
}
}
void input_n(int n,rectangle rt[])
{
for(int i=0;i<n;i++)
intput_1(&rt[i]);
}
float calc_distance(float x1 ,float x2,float y1,float y2 )
{
float distance=sqrt((x2-x1)^2+(y2-y1)^2)
return distance;
void compute_area_1(rectangle *one)
{
one->area=calc_length(one->p[2].x,one->p[1].x,one->p[2].y,one->p[1].y)*calc_length(one
->p[3].x,one->p[1].x,one->p[3].y,one->p[1].y);
}
void compute_area_n(int n,rectangle rt[])
{
for(int i=0;i<n;i++)
compute_area_1(&rt[i]);
}
void output_1(rectangle *one)
{
printf("Area of rectangle with vertices (%f,%f) , (%f,%f) , (%f,%f) is %f
\n",one->p[1].x,one->p[1].y,one->p[2].x,one->p[2].y,one->p[3].x,one->p[3].y,one->area);
}
void output_n(int n,rectangle rt[])
{
for(int i=0;i<n;i++)
output_1(&rt[i]);
}
int main()
{
int n;
printf("enter no. of rectangles");
scanf("%d",&n);
rectangle rt[n];
input_n(n,rt);
compute_area_n(n,rt);
output_n(n,rt);
return 0;
}
